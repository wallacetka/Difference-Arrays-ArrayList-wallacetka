// Package declaration (optional, depending on your IDE setup)
package com.example;

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        // Demonstration of Arrays
        // Arrays have a fixed size, defined at the time of creation.
        int[] array = new int[5];
        array[0] = 1;
        array[1] = 2;
        array[2] = 3;
        array[3] = 4;
        array[4] = 5;

        // Accessing elements in an array
        System.out.println("Array elements:");
        for (int i = 0; i < array.length; i++) {
            System.out.println("Element at index " + i + ": " + array[i]);
        }

        // Demonstration of ArrayList
        // ArrayLists can dynamically change size, meaning elements can be added or removed.
        ArrayList<Integer> arrayList = new ArrayList<>();
        arrayList.add(1);
        arrayList.add(2);
        arrayList.add(3);
        arrayList.add(4);
        arrayList.add(5);

        // Accessing elements in an ArrayList
        System.out.println("ArrayList elements:");
        for (int i = 0; i < arrayList.size(); i++) {
            System.out.println("Element at index " + i + ": " + arrayList.get(i));
        }

        // Adding an element to the ArrayList
        arrayList.add(6);
        System.out.println("ArrayList after adding an element:");
        for (int i = 0; i < arrayList.size(); i++) {
            System.out.println("Element at index " + i + ": " + arrayList.get(i));
        }

        // Removing an element from the ArrayList
        arrayList.remove(2); // Removes the element at index 2
        System.out.println("ArrayList after removing an element:");
        for (int i = 0; i < arrayList.size(); i++) {
            System.out.println("Element at index " + i + ": " + arrayList.get(i));
        }

        // Summary of differences:
        // 1. Arrays have a fixed size, while ArrayLists can dynamically resize.
        // 2. Arrays can store primitive types and objects, whereas ArrayLists can only store objects.
        // 3. Arrays provide faster access to elements due to contiguous memory allocation, but lack flexibility.
        // 4. ArrayLists provide methods for easy data manipulation such as add, remove, and contains.
    }
}
